[versions]
micrometer = "1.10.9"
junit = "5.10.0"
asmForPlugins = "7.3.1"
javaFormatForPlugins = "0.0.39"
jsr305 = "3.0.2"
javaxServlet="4.0.1"
micrometerContextPropagation="1.0.6-SNAPSHOT"
jakartaWeb="9.1.0"
otelInstrumentation="1.19.2-alpha"
aopalliance="1.0"
zipkinAws="0.23.5"
otelBom="1.19.0"
logback = "1.2.13"
wavefrontSdk="3.0.4"
otelBomAlpha="1.19.0-alpha"
log4j = "2.20.0"
wavefrontReporter="1.7.16"
slf4j = "1.7.36"
assertj = "3.24.2"
awaitility = "4.2.0"
mockito = "5.5.0"
wiremock = "2.35.0"
testcontainers = "1.19.0"
braveBom = "5.14.1"
reactorBom = "2022.0.8"

[libraries]
aopAlliance = { module = "aopalliance:aopalliance", version.ref = "aopalliance" }
assertj = { module = "org.assertj:assertj-core", version.ref = "assertj" }
awaitility = { module = "'org.awaitility:awaitility", version.ref = "awaitility" }
braveBom = { module = "io.zipkin.brave:brave-bom", version.ref = "braveBom" }
jakartaWeb = { module = "jakarta.platform:jakarta.jakartaee-web-api", version.ref = "jakartaWeb" }
javaxServlet = { module = "javax.servlet:javax.servlet-api", version.ref = "javaxServlet" }
log4j = { module = "org.apache.logging.log4j:log4j-core", version.ref = "log4j" }
logback = { module = "ch.qos.logback:logback-classic", version.ref = "logback" }
micrometerContextPropagation = { module = "io.micrometer:context-propagation", version.ref = "micrometerContextPropagation" }
micrometerBom = { module = "io.micrometer:micrometer-bom", version.ref = "micrometer" }
mockitoCore = { module = "org.mockito:mockito-core", version.ref = "mockito" }
mockitoInline = { module = "org.mockito:mockito-inline", version.ref = "mockito" }
mockitoJunit = { module = "org.mockito:mockito-junit-jupiter", version.ref = "mockito" }
otelBom = { module = "io.opentelemetry:opentelemetry-bom", version.ref = "otelBom" }
otelBomAlpha = { module = "io.opentelemetry:opentelemetry-bom-alpha", version.ref = "otelBomAlpha" }
otelInstrumentation = { module = "io.opentelemetry.instrumentation:opentelemetry-instrumentation-api-semconv", version.ref = "otelInstrumentation" }
reactorBom = { module = "io.projectreactor:reactor-bom", version.ref = "reactorBom" }
slf4j = { module = "org.slf4j:slf4j-api", version.ref = "slf4j" }
testcontainers = { module = "org.testcontainers:testcontainers", version.ref = "testcontainers" }
testcontainersJunit = { module = "org.testcontainers:junit-jupiter", version.ref = "testcontainers" }
wavefrontSdk = { module = "com.wavefront:wavefront-sdk-java", version.ref = "wavefrontSdk" }
wavefrontReporter = { module = "com.wavefront:wavefront-internal-reporter-java", version.ref = "wavefrontReporter" }
wiremock = { module = "com.github.tomakehurst:wiremock-jre8-standalone", version.ref = "wiremock" }
zipkinAws = { module = "io.zipkin.aws:brave-propagation-aws", version.ref = "zipkinAws" }
junitBom = { module = "org.junit:junit-bom", version.ref = "junit" }
asmForPlugins = { module = "org.ow2.asm:asm", version.ref = "asmForPlugins" }
javaFormatForPlugins = { module = "io.spring.javaformat:spring-javaformat-checkstyle", version.ref = "javaFormatForPlugins" }
jsr305 = { module = "com.google.code.findbugs:jsr305", version.ref = "jsr305" }

[plugins]
license = { id = "com.github.hierynomus.license", version = "0.16.1" }
nebulaRelease = { id = "nebula.release", version = "16.1.0" }
nebulaPublishing = { id = "com.netflix.nebula.maven-nebula-publish", version = "20.1.0" }
nebulaProject = { id = "com.netflix.nebula.project", version = "10.1.2" }
noHttp = { id = "io.spring.nohttp", version = "0.0.11" }
nexusPublish = { id = "io.github.gradle-nexus.publish-plugin", version = "1.3.0" }
javaformat = { id = "io.spring.javaformat", version = "0.0.39" }
jmh = { id = "me.champeau.jmh", version = "0.7.1" }

[versions]
micrometer = "1.12.6"
micrometerContextPropagation="1.1.1"
junit = "5.10.2"
javaxServlet="4.0.1"
jmh="1.37"
jakartaWeb="9.1.0"
otelInstrumentation="1.31.0-alpha"
aopalliance="1.0"
zipkinAws="0.23.5"
otelBom="1.31.0"
logback = "1.4.14"
wavefrontSdk="3.4.3"
otelBomAlpha="1.31.0-alpha"
log4j = "2.21.1"
wavefrontReporter="1.7.16"
slf4j = "1.7.36"
assertj = "3.24.2"
awaitility = "4.2.1"
mockito = "5.7.0"
wiremock = "3.0.1"
testcontainers = "1.19.8"
braveBom = "5.16.0"
reactorBom = "2022.0.19"
asmForPlugins = "7.3.1"
javaFormatForPlugins = "0.0.42"
jsr305 = "3.0.2"
aspectjweaver = "1.9.22.1"
spring = "5.3.36"

[libraries]
aopAlliance = { module = "aopalliance:aopalliance", version.ref = "aopalliance" }
asmForPlugins = { module = "org.ow2.asm:asm", version.ref = "asmForPlugins" }
aspectjweaver = { module = "org.aspectj:aspectjweaver", version.ref = "aspectjweaver" }
assertj = { module = "org.assertj:assertj-core", version.ref = "assertj" }
awaitility = { module = "org.awaitility:awaitility", version.ref = "awaitility" }
braveBom = { module = "io.zipkin.brave:brave-bom", version.ref = "braveBom" }
jakartaWeb = { module = "jakarta.platform:jakarta.jakartaee-web-api", version.ref = "jakartaWeb" }
javaFormatForPlugins = { module = "io.spring.javaformat:spring-javaformat-checkstyle", version.ref = "javaFormatForPlugins" }
javaxServlet = { module = "javax.servlet:javax.servlet-api", version.ref = "javaxServlet" }
jmh = { module = "org.openjdk.jmh:jmh-core", version.ref = "jmh" }
jmhGeneratorAnnProcess = { module = "org.openjdk.jmh:jmh-generator-annprocess", version.ref = "jmh" }
jsr305 = { module = "com.google.code.findbugs:jsr305", version.ref = "jsr305" }
junitBom = { module = "org.junit:junit-bom", version.ref = "junit" }
log4j = { module = "org.apache.logging.log4j:log4j-core", version.ref = "log4j" }
logback = { module = "ch.qos.logback:logback-classic", version.ref = "logback" }
micrometerContextPropagation = { module = "io.micrometer:context-propagation", version.ref = "micrometerContextPropagation" }
micrometerBom = { module = "io.micrometer:micrometer-bom", version.ref = "micrometer" }
mockitoCore = { module = "org.mockito:mockito-core", version.ref = "mockito" }
mockitoJunit = { module = "org.mockito:mockito-junit-jupiter", version.ref = "mockito" }
otelBom = { module = "io.opentelemetry:opentelemetry-bom", version.ref = "otelBom" }
otelBomAlpha = { module = "io.opentelemetry:opentelemetry-bom-alpha", version.ref = "otelBomAlpha" }
otelInstrumentation = { module = "io.opentelemetry.instrumentation:opentelemetry-instrumentation-api-semconv", version.ref = "otelInstrumentation" }
reactorBom = { module = "io.projectreactor:reactor-bom", version.ref = "reactorBom" }
slf4j = { module = "org.slf4j:slf4j-api", version.ref = "slf4j" }
springCore = { module = "org.springframework:spring-core", version.ref = "spring" }
springContext = { module = "org.springframework:spring-context", version.ref = "spring" }
testcontainers = { module = "org.testcontainers:testcontainers", version.ref = "testcontainers" }
testcontainersJunit = { module = "org.testcontainers:junit-jupiter", version.ref = "testcontainers" }
wavefrontSdk = { module = "com.wavefront:wavefront-sdk-java", version.ref = "wavefrontSdk" }
wavefrontReporter = { module = "com.wavefront:wavefront-internal-reporter-java", version.ref = "wavefrontReporter" }
wiremock = { module = "com.github.tomakehurst:wiremock-jre8-standalone", version.ref = "wiremock" }
zipkinAws = { module = "io.zipkin.aws:brave-propagation-aws", version.ref = "zipkinAws" }

# plugin dependencies
plugin-license = { module = "gradle.plugin.com.hierynomus.gradle.plugins:license-gradle-plugin", version = "0.16.1" }
plugin-nebulaRelease = { module = "com.netflix.nebula:nebula-release-plugin", version = "18.0.8" }
plugin-nebulaPublishing = { module = "com.netflix.nebula:nebula-publishing-plugin", version = "20.3.0" }
plugin-nebulaProject = { module = "com.netflix.nebula:nebula-project-plugin", version = "10.1.5" }
plugin-nebulaInfo = { module = "com.netflix.nebula:gradle-info-plugin", version = "12.1.6" }
plugin-noHttp = { module = "io.spring.nohttp:nohttp-gradle", version = "0.0.11" }
plugin-nexusPublish = { module = "io.github.gradle-nexus:publish-plugin", version = "1.3.0" }
plugin-javaformat = { module = "io.spring.javaformat:spring-javaformat-gradle-plugin", version = "0.0.41" }
plugin-jmh = { module = "me.champeau.jmh:jmh-gradle-plugin", version = "0.7.2" }
plugin-spring-antora = { module = "io.spring.gradle.antora:spring-antora-plugin", version = "0.0.1" }
plugin-antora = { module = "org.antora:gradle-antora-plugin", version = "1.0.0" }

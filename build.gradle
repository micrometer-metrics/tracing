buildscript {

	repositories {
		mavenCentral()
		gradlePluginPortal()
	}

	dependencies {
		classpath libs.plugin.license
		classpath libs.plugin.nebulaRelease
		classpath libs.plugin.nebulaPublishing
		classpath libs.plugin.nebulaProject
		classpath libs.plugin.nebulaInfo
		classpath libs.plugin.noHttp
		classpath libs.plugin.nexusPublish
		classpath libs.plugin.javaformat
		classpath libs.plugin.jmh

		constraints {
			classpath(libs.asmForPlugins) {
				because 'Supports modern JDKs'
			}
		}
	}

	configurations.classpath.resolutionStrategy.cacheDynamicVersionsFor 0, 'minutes'
}

// Hacks because of Antora's clone/checkout/worktrees behavior
// Antora uses shallow-clone and worktrees to check out branches/tags.
if (project.hasProperty('antora')) {
	'git fetch --unshallow --all --tags'.execute().text // Antora shallow-clones so there is no history (we need commit history to find the last tag in the tree)
	String ref = 'git rev-parse --abbrev-ref HEAD'.execute().text.trim()
	if (ref == 'HEAD') { // if Antora checks out a tag instead of a branch
		String tag = 'git tag --points-at HEAD'.execute().text.trim() // jgit is not able to figure out tags in Antora's worktree
		if (tag) {
			println "Found release tag: $tag, using it as release.version"
			ext['release.version'] = tag.substring(1)
		}
	}
}

// TODO: remove this hack, see: https://github.com/nebula-plugins/nebula-release-plugin/issues/213
def releaseStage = findProperty('release.stage')
apply plugin: 'nebula.release'
release.defaultVersionStrategy = nebula.plugin.release.git.opinion.Strategies.SNAPSHOT

apply plugin: 'io.github.gradle-nexus.publish-plugin'
apply from: 'dependencies.gradle'

allprojects {
	group = 'io.micrometer'
	ext.'release.stage' = releaseStage ?: 'SNAPSHOT'

	afterEvaluate { project -> println "I'm configuring $project.name with version $project.version" }
}

subprojects {
	apply plugin: 'signing'

	if (project.name != 'micrometer-tracing-bom') {
		if (project.name.contains('benchmarks')) {
			apply plugin: 'java'
		} else {
			apply plugin: 'java-library'
		}
		apply plugin: 'com.github.hierynomus.license'
		apply plugin: 'checkstyle'
		apply plugin: 'io.spring.nohttp'
		apply plugin: 'io.spring.javaformat'
		apply plugin: 'me.champeau.jmh'

		java {
			// It is more idiomatic to define different features for different sets of optional
			// dependencies, e.g., 'dropwizard' and 'reactor'. If this library published Gradle
			// metadata, Gradle users would be able to use these feature names in their dependency
			// declarations instead of understanding the actual required optional dependencies.
			// But we don't publish Gradle metadata yet and this may be overkill so just have a
			// single feature for now to correspond to any optional dependency.
			registerFeature('optional') {
				usingSourceSet(sourceSets.main)
			}
		}

		// All projects use optional annotations, but since we don't expose them downstream we would
		// have to add the dependency in every project, which is tedious so just do it here.
		dependencies {
			// JSR-305 only used for non-required meta-annotations
			optionalApi libs.jsr305
			checkstyle libs.javaFormatForPlugins
			jmh libs.jmh
			jmh libs.jmhGeneratorAnnProcess
			jmhAnnotationProcessor libs.jmhGeneratorAnnProcess
			jmh 'net.sf.jopt-simple:jopt-simple'
		}

		jmh {
			duplicateClassesStrategy = DuplicatesStrategy.EXCLUDE
		}

		tasks {
			compileJava {
				options.encoding = 'UTF-8'
				options.compilerArgs << '-Xlint:unchecked' << '-Xlint:deprecation'

				sourceCompatibility = JavaVersion.VERSION_1_8
				targetCompatibility = JavaVersion.VERSION_1_8

				// ensure Java 8 baseline is enforced for main source
				if (JavaVersion.current().isJava9Compatible()) {
					options.release = 8
				}
			}
			compileTestJava {
				options.encoding = 'UTF-8'
				options.compilerArgs << '-Xlint:unchecked' << '-Xlint:deprecation'
				sourceCompatibility = JavaVersion.VERSION_1_8
				targetCompatibility = JavaVersion.VERSION_1_8
			}

			javadoc {
				configure(options) {
					tags(
							'apiNote:a:API Note:',
							'implSpec:a:Implementation Requirements:',
							'implNote:a:Implementation Note:'
					)
				}
			}
		}

		normalization {
			runtimeClasspath {
				metaInf {
					[
							'Build-Date',
							'Build-Date-UTC',
							'Built-By',
							'Built-OS',
							'Build-Host',
							'Build-Job',
							'Build-Number',
							'Build-Id',
							'Change',
							'Full-Change',
							'Branch',
							'Module-Origin',
							'Created-By',
							'Build-Java-Version'
					].each {
						ignoreAttribute it
						ignoreProperty it
					}
				}
			}
		}

		//noinspection GroovyAssignabilityCheck
		test {
			// set heap size for the test JVM(s)
			maxHeapSize = '1500m'

			useJUnitPlatform {
				excludeTags 'docker'
			}

			develocity.testRetry {
				maxFailures = 5
				maxRetries = 3
			}
		}

		task dockerTest(type: Test) {
			// set heap size for the test JVM(s)
			maxHeapSize = '1500m'

			useJUnitPlatform {
				includeTags 'docker'
			}
		}

		project.tasks.withType(Test) { Test testTask ->
			testTask.testLogging.exceptionFormat = 'full'
		}

		license {
			header rootProject.file('gradle/licenseHeader.txt')
			strictCheck true
			mapping {
				kt = 'SLASHSTAR_STYLE'
			}
			sourceSets = project.sourceSets

			ext.year = Calendar.getInstance().get(Calendar.YEAR)
			skipExistingHeaders = true
			exclude '**/*.json' // comments not supported
		}

		// Publish resolved versions.
		plugins.withId('maven-publish') {
			sourceCompatibility = JavaVersion.VERSION_1_8
			targetCompatibility = JavaVersion.VERSION_1_8

			publishing {
				publications {
					nebula(MavenPublication) {
						versionMapping {
							allVariants {
								fromResolutionResult()
							}
						}

						// We publish resolved versions so don't need to publish our dependencyManagement
						// too. This is different from many Maven projects, where published artifacts often
						// don't include resolved versions and have a parent POM including dependencyManagement.
						pom.withXml {
							def dependencyManagement = asNode().get('dependencyManagement')
							if (dependencyManagement != null) {
								asNode().remove(dependencyManagement)
							}
						}
					}
				}
			}
		}
	}

	plugins.withId('maven-publish') {
		publishing {
			publications {
				nebula(MavenPublication) {
					// Nebula converts dynamic versions to static ones so it's ok.
					suppressAllPomMetadataWarnings()
				}
			}
			repositories {
				maven {
					name = 'Snapshot'
					url = 'https://repo.spring.io/snapshot'
					credentials {
						username findProperty('SNAPSHOT_REPO_USER')
						password findProperty('SNAPSHOT_REPO_PASSWORD')
					}
				}
				maven {
					name = 'Milestone'
					url = 'https://repo.spring.io/milestone'
					credentials {
						username findProperty('MILESTONE_REPO_USER')
						password findProperty('MILESTONE_REPO_PASSWORD')
					}
				}
			}
		}

		signing {
			required = System.env.CIRCLE_STAGE == 'deploy'
			useInMemoryPgpKeys(findProperty('SIGNING_KEY'), findProperty('SIGNING_PASSWORD'))
			sign publishing.publications.nebula
		}

		// Nebula doesn't interface with Gradle's module format so just disable it for now.
		tasks.withType(GenerateModuleMetadata) {
			enabled = false
		}
	}

	tasks.register('downloadDependencies') {
		outputs.upToDateWhen { false }
		doLast {
			project.configurations.findAll { it.canBeResolved }*.files
		}
	}

	if (!['samples', 'benchmarks'].find { project.name.contains(it) }) {
		apply plugin: 'com.netflix.nebula.maven-publish'
		apply plugin: 'com.netflix.nebula.maven-manifest'
		apply plugin: 'com.netflix.nebula.maven-developer'
		apply plugin: 'com.netflix.nebula.javadoc-jar'
		apply plugin: 'com.netflix.nebula.source-jar'
		apply plugin: 'com.netflix.nebula.maven-apache-license'
		apply plugin: 'com.netflix.nebula.publish-verification'
		apply plugin: 'com.netflix.nebula.contacts'
		apply plugin: 'com.netflix.nebula.info'
		apply plugin: 'com.netflix.nebula.project'

		if (project.name != 'micrometer-tracing-bom') {
			jar {
				manifest.attributes.put('Automatic-Module-Name', project.name.replace('-', '.'))
				metaInf {
					from "$rootDir/LICENSE"
					from "$rootDir/NOTICE"
				}
			}
		}

		contacts {
			'tludwig@vmware.com' {
				moniker 'Tommy Ludwig'
				github 'shakuzen'
			}
			'jivanov@vmware.com' {
				moniker 'Jonatan Ivanov'
				github 'jonatan-ivanov'
			}
			'mgrzejszczak@vmware.com' {
				moniker 'Marcin Grzejszczak'
				github 'marcingrzejszczak'
			}
		}
	}

	description = 'Facade over tracing concepts'

	repositories {
		maven {
			url 'https://repo.spring.io/snapshot/'
			content { includeGroup 'io.micrometer' }
		}
		mavenCentral()
	}

	def check = tasks.findByName('check')
	if (check) project.rootProject.tasks.releaseCheck.dependsOn check
}

nexusPublishing {
	repositories {
		mavenCentral {
			nexusUrl.set(uri('https://s01.oss.sonatype.org/service/local/'))
			snapshotRepositoryUrl.set(uri('https://repo.spring.io/snapshot/')) // not used but necessary for the plugin
			username = findProperty('MAVEN_CENTRAL_USER')
			password = findProperty('MAVEN_CENTRAL_PASSWORD')
		}
	}
}

wrapper {
	gradleVersion = '8.6'
}

defaultTasks 'build'

name: Release Workflow

on:
  workflow_dispatch: # Enables manual trigger

jobs:
  generate-release-notes:
    name: Generate Release Notes
    runs-on: ubuntu-latest

    steps:
      - name: Check out the repository
        uses: actions/checkout@v3

      - name: Download Changelog Generator
        run: |
          curl -L -o github-changelog-generator.jar https://github.com/spring-io/github-changelog-generator/releases/download/v0.0.11/github-changelog-generator.jar

      - name: Generate release notes
        id: generate_notes
        run: |
          java -jar github-changelog-generator.jar \
            --milestone ${GITHUB_REF_NAME#v} \
            --changelog-file changelog.md \
            --repository ${{ github.repository }} \
            --token ${{ secrets.GITHUB_TOKEN }}

      - name: Remove duplicate artifact upgrades
        id: process_notes
        run: |
          # Create a temporary file
          touch changelog.tmp
          
          # Copy everything before dependency section
          sed -n '1,/^## :hammer: Dependency Upgrades/p' changelog.md > changelog.tmp
          
          # Process dependency upgrades section to keep only latest versions
          awk '
            function compare_versions(v1, v2) {
              split(v1, a, /[.-]/)
              split(v2, b, /[.-]/)
          
              for (i = 1; i <= length(a) && i <= length(b); i++) {
                if (a[i] != b[i]) {
                  return (a[i] > b[i]) ? 1 : -1
                }
              }
              return (length(a) > length(b)) ? 1 : (length(a) < length(b)) ? -1 : 0
            }
          
            BEGIN { print "" }  # ensure newline after header
          
            # Process dependency section
            /^- Upgrade to/ {
              line = $0
              match(line, /Upgrade to ([^ ]+) ([^ [\]]+)/, arr)
              if (arr[1] != "") {
                base_pkg = arr[1]
                version = arr[2]
          
                if (!(base_pkg in versions) || compare_versions(version, versions[base_pkg]) > 0) {
                  versions[base_pkg] = version
                  packages[base_pkg] = line
                }
              }
            }
          
            END {
              # Print all latest package versions
              for (pkg in packages) {
                print packages[pkg]
              }
              print ""  # ensure newline at end
            }
          ' < <(sed -n '/^## :hammer: Dependency Upgrades/,/^## /p' changelog.md) >> changelog.tmp
          
          # Copy everything after dependency section, starting with the next section header
          sed -n '/^## :hammer: Dependency Upgrades/,$ p' changelog.md | \
          sed '1,/^## / { /^## :hammer: Dependency Upgrades/d; /^- Upgrade/d; }' >> changelog.tmp
          
          # Replace original file
          mv changelog.tmp changelog.md

      - name: Set release notes output
        id: set_notes_output
        run: |
          notes=$(cat changelog-processed.md)
          echo "release-notes=$notes" >> $GITHUB_OUTPUT
        shell: bash

  close-milestone:
    name: Close Milestone
    runs-on: ubuntu-latest
    needs: generate-release-notes

    steps:
      - name: Close milestone
        run: |
          milestone_name=${{ github.ref_name }}
          milestone_name=${milestone_name#"v"} # Remove the prefix `v`
          curl -X PATCH \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            https://api.github.com/repos/${{ github.repository_owner }}/${{ github.event.repository.name }}/milestones \
            -d "{\"state\": \"closed\", \"title\": \"$milestone_name\"}"

  update-release:
    name: Update Release Notes
    runs-on: ubuntu-latest
    needs: close-milestone

    steps:
      - name: Update release text
        run: |
          release_id=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            https://api.github.com/repos/${{ github.repository_owner }}/${{ github.event.repository.name }}/releases/tags/${{ github.ref_name }} | jq -r ".id")
          curl -X PATCH \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            https://api.github.com/repos/${{ github.repository_owner }}/${{ github.event.repository.name }}/releases/$release_id \
            -d "{\"body\": \"$(cat changelog-processed.md)\"}"

  notify:
    name: Send Notifications
    runs-on: ubuntu-latest
    needs: update-release

    steps:
#      - name: Notify Google Chat
#        run: |
#          curl -X POST \
#            -H "Content-Type: application/json" \
#            -d "{\"text\": \"${{ github.event.repository.name }}-announcing ${{ github.ref_name }}\"}" \
#            ${{ secrets.SPRING_RELEASE_GCHAT_WEBHOOK_URL }}

# TODO: Waiting for credentials
#      - name: Post on Twitter
#        uses: ethomson/send-tweet@v1
#        with:
#          status: "New release of ${{ github.ref_name }} is now live! Check out the changelog here: https://github.com/${{ github.repository_owner }}/${{ github.event.repository.name }}/releases/${{ github.ref_name }}"
#          twitter_api_key: ${{ secrets.TWITTER_API_KEY }}
#          twitter_api_key_secret: ${{ secrets.TWITTER_API_SECRET }}
#          twitter_access_token: ${{ secrets.TWITTER_ACCESS_TOKEN }}
#          twitter_access_token_secret: ${{ secrets.TWITTER_ACCESS_SECRET }}

      - name: Post on Bluesky
        env:
          BSKY_IDENTIFIER: ${{ secrets.TEMP_BLUESKY_HANDLE }}
          BSKY_PASSWORD: ${{ secrets.TEMP_BLUESKY_PASSWORD }}
        run: |
          # First get the session token
          SESSION_TOKEN=$(curl -s -X POST https://bsky.social/xrpc/com.atproto.server.createSession \
            -H "Content-Type: application/json" \
            -d "{\"identifier\":\"$BSKY_IDENTIFIER\",\"password\":\"$BSKY_PASSWORD\"}" | \
            jq -r .accessJwt)
          
          # Create post content
          VERSION=${GITHUB_REF_NAME#v}
          # TODO: Change me back to this text
          # POST_TEXT="${{ github.event.repository.name }} ${VERSION} has been released!\n\nCheck out the changelog: https://github.com/${GITHUB_REPOSITORY}/releases/tag/${GITHUB_REF_NAME}"
          POST_TEXT="Test"
          
          # Create the post
          curl -X POST https://bsky.social/xrpc/com.atproto.repo.createRecord \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer ${SESSION_TOKEN}" \
            -d "{
              \"repo\": \"$BSKY_IDENTIFIER\",
              \"collection\": \"app.bsky.feed.post\",
              \"record\": {
                \"\$type\": \"app.bsky.feed.post\",
                \"text\": \"$POST_TEXT\",
                \"createdAt\": \"$(date -u +"%Y-%m-%dT%H:%M:%S.000Z")\"
              }
            }"

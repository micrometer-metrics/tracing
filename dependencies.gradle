def VERSIONS = [
	libs.javaxServlet,
	libs.jakartaWeb,

	libs.micrometerContextPropagation,

	libs.aopAlliance,
	libs.aspectjweaver,
	libs.springContext,
	libs.springCore,

	// logging
	libs.logback,
	libs.log4j,
	libs.slf4j,
	// otel
	libs.otelInstrumentation,
	// zipkin
	libs.zipkinAws,
	// wavefront
	libs.wavefrontSdk,
	libs.wavefrontReporter,
	// test
	libs.assertj,
	libs.awaitility,
	libs.mockitoCore,
	libs.mockitoJunit,
	libs.wiremock,
	libs.testcontainers,
	libs.testcontainersJunit
]

def MICROMETER_PLATFORM_VERSIONS = [
		libs.micrometerBom
]

def PLATFORM_VERSIONS = [
	libs.zipkinReporterBom,
	libs.braveBom,
	// opentelemetry-instrumentation-api dependency above with this
	libs.otelBom,
	libs.otelBomAlpha,
	libs.reactorBom,
	libs.junitBom
]

subprojects {
	plugins.withId('java-library') {
		dependencies {
			constraints {
				// Direct dependencies
				VERSIONS.each { version ->
					// java-library plugin has three root configurations, so we apply constraints too all of
					// them so they all can use the managed versions.
					api version
					compileOnly version
					runtimeOnly version
				}
			}
			(MICROMETER_PLATFORM_VERSIONS + PLATFORM_VERSIONS).each { bom ->
				api platform(bom)
				compileOnly platform(bom)
				runtimeOnly platform(bom)
			}
		}
	}
	plugins.withId('java-platform') {
		dependencies {
			constraints {
				rootProject.subprojects
					.findAll { !it.name.contains('micrometer-tracing-bom') }
					.each { api(group: it.group, name: it.name, version: it.version.toString()) }
			}
			javaPlatform.allowDependencies()
			MICROMETER_PLATFORM_VERSIONS.each { api platform(it) }
		}
	}
}

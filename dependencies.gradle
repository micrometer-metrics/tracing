def VERSIONS = [
		'javax.servlet:javax.servlet-api:4.0.1',
		'aopalliance:aopalliance:1.0',
		// logging
		'ch.qos.logback:logback-classic:1.2.+',
		'org.apache.logging.log4j:log4j-core:2.+',
		'org.slf4j:slf4j-api:1.7.+',
		// otel
		'io.opentelemetry.instrumentation:opentelemetry-instrumentation-api:1.7.0-alpha',
		// zipkin
		'io.zipkin.aws:brave-propagation-aws:0.23.2',
		// wavefront
		'com.wavefront:wavefront-sdk-java:2.6.4',
		'com.wavefront:wavefront-internal-reporter-java:1.7.5',
		// test
		'org.assertj:assertj-core:latest.release',
		'org.awaitility:awaitility:latest.release',
		'org.junit.jupiter:junit-jupiter:5.8.+',
		'org.junit.platform:junit-platform-launcher:1.8.+',
		'org.junit.vintage:junit-vintage-engine:5.8.+',
		'org.mockito:mockito-core:latest.release',
		'org.mockito:mockito-inline:latest.release',
		'com.squareup.okhttp3:mockwebserver:4.8.0'
]

subprojects {
	plugins.withId('java-library') {
		dependencies {
			constraints {
				// Direct dependencies
				VERSIONS.each { version ->
					// java-library plugin has three root configurations, so we apply constraints too all of
					// them so they all can use the managed versions.
					api version
					compileOnly version
					runtimeOnly version
				}
			}
			implementation platform('io.micrometer:micrometer-bom:2.0.0-SNAPSHOT')
			implementation platform('io.zipkin.brave:brave-bom:5.13.2')
			implementation platform('io.opentelemetry:opentelemetry-bom:1.7.0')
			implementation platform('io.opentelemetry:opentelemetry-bom-alpha:1.7.0-alpha')
		}
	}
}
